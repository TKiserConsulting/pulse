<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="Pulse Rules" ToolsVersion="16.0">
  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">

    <!-- Documentation Rules (SA1600-) -->

    <Rule Id="SA0001" Action="None" />

    <Rule Id="SA1600" Action="None" /><!--ElementsMustBeDocumented-->
    <!--A C# code element is missing a documentation header.-->

    <Rule Id="SA1601" Action="None" /><!--PartialElementsMustBeDocumented-->
    <!--A C# partial element is missing a documentation header.-->

    <Rule Id="SA1602" Action="None" /><!--EnumerationItemsMustBeDocumented-->
    <!--An item within a C# enumeration is missing an Xml documentation header.-->

    <Rule Id="SA1603" Action="None" /><!--DocumentationMustContainValidXml-->
    <!--The Xml within a C# element's document header is badly formed.-->

    <Rule Id="SA1604" Action="None" /><!--ElementDocumentationMustHaveSummary-->
    <!--The Xml header documentation for a C# element is missing a <code>&lt;summary&gt;</code> tag.-->

    <Rule Id="SA1605" Action="None" /><!--PartialElementDocumentationMustHaveSummary-->
    <!--The <code>&lt;summary&gt;</code> or <code>&lt;content&gt;</code> tag within the documentation header for a C# code element is missing or empty.-->

    <Rule Id="SA1606" Action="None" /><!--ElementDocumentationMustHaveSummaryText-->
    <!--The <code>&lt;summary&gt;</code> tag within the documentation header for a C# code element is empty.-->

    <Rule Id="SA1607" Action="None" /><!--PartialElementDocumentationMustHaveSummaryText-->
    <!--The <code>&lt;summary&gt;</code> or <code>&lt;content&gt;</code> tag within the documentation header for a C# code element is empty.-->

    <Rule Id="SA1608" Action="None" /><!--ElementDocumentationMustNotHaveDefaultSummary-->
    <!--The <code>&lt;summary&gt;</code> tag within an element's Xml header documentation contains the default text generated by Visual Studio during the creation of the element.-->

    <Rule Id="SA1609" Action="None" /><!--PropertyDocumentationMustHaveValue-->
    <!--The Xml header documentation for a C# property does not contain a <code>&lt;value&gt;</code> tag.-->

    <Rule Id="SA1610" Action="None" /><!--PropertyDocumentationMustHaveValueText-->
    <!--The Xml header documentation for a C# property contains an empty <code>&lt;value&gt;</code> tag.-->

    <Rule Id="SA1611" Action="None" /><!--ElementParametersMustBeDocumented-->
    <!--A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters.-->

    <Rule Id="SA1612" Action="None" /><!--ElementParameterDocumentationMustMatchElementParameters-->
    <!--The documentation describing the parameters to a C# method, constructor, delegate or indexer element does not match the actual parameters on the element.-->

    <Rule Id="SA1613" Action="None" /><!--ElementParameterDocumentationMustDeclareParameterName-->
    <!--A <code>&lt;param&gt;</code> tag within a C# element's documentation header is missing a name attribute containing the name of the parameter.-->

    <Rule Id="SA1614" Action="None" /><!--ElementParameterDocumentationMustHaveText-->
    <!--A <code>&lt;param&gt;</code> tag within a C# element's documentation header is empty.-->

    <Rule Id="SA1615" Action="None" /><!--ElementReturnValueMustBeDocumented-->
    <!--A C# element is missing documentation for its return value.-->

    <Rule Id="SA1616" Action="None" /><!--ElementReturnValueDocumentationMustHaveText-->
    <!--The <code>&lt;returns&gt;</code> tag within a C# element's documentation header is empty.-->

    <Rule Id="SA1617" Action="None" /><!--VoidReturnValueMustNotBeDocumented-->
    <!--A C# code element does not contain a return value, or returns void, but the documentation header for the element contains a <code>&lt;returns&gt;</code> tag.-->

    <Rule Id="SA1618" Action="None" /><!--GenericTypeParametersMustBeDocumented-->
    <!--A generic C# element is missing documentation for one or more of its generic type parameters.-->

    <Rule Id="SA1619" Action="None" /><!--GenericTypeParametersMustBeDocumentedPartialClass-->
    <!--A generic, partial C# element is missing documentation for one or more of its generic type parameters, and the documentation for the element contains a <code>&lt;summary&gt;</code> tag.-->

    <Rule Id="SA1620" Action="None" /><!--GenericTypeParameterDocumentationMustMatchTypeParameters-->
    <!--The <code>&lt;typeparam&gt;</code> tags within the Xml header documentation for a generic C# element do not match the generic type parameters on the element.-->

    <Rule Id="SA1621" Action="None" /><!--GenericTypeParameterDocumentationMustDeclareParameterName-->
    <!--A <code>&lt;typeparam&gt;</code> tag within the Xml header documentation for a generic C# element is missing a name attribute, or contains an empty name attribute.-->

    <Rule Id="SA1622" Action="None" /><!--GenericTypeParameterDocumentationMustHaveText-->
    <!--A <code>&lt;typeparam&gt;</code> tag within the Xml header documentation for a generic C# element is empty.-->

    <Rule Id="SA1623" Action="None" /><!--PropertySummaryDocumentationMustMatchAccessors-->
    <!--The documentation text within a C# property's <code>&lt;summary&gt;</code> tag does not match the accessors within the property.-->

    <Rule Id="SA1624" Action="None" /><!--PropertySummaryDocumentationMustOmitSetAccessorWithRestrictedAccess-->
    <!--The documentation text within a C# property's <code>&lt;summary&gt;</code> tag takes into account all of the accessors within the property, but one of the accessors has limited access.-->

    <Rule Id="SA1625" Action="None" /><!--ElementDocumentationMustNotBeCopiedAndPasted-->
    <!--The Xml documentation for a C# element contains two or more identical entries, indicating that the documentation has been copied and pasted.-->

    <Rule Id="SA1626" Action="Warning" /><!--SingleLineCommentsMustNotUseDocumentationStyleSlashes-->
    <!--The C# code contains a single-line comment which begins with three forward slashes in a row.-->

    <Rule Id="SA1627" Action="None" /><!--DocumentationTextMustNotBeEmpty-->
    <!--The Xml header documentation for a C# code element contains an empty tag.-->

    <Rule Id="SA1628" Action="None" /><!--DocumentationTextMustBeginWithACapitalLetter-->
    <!--A section of the Xml header documentation for a C# element does not begin with a capital letter.-->

    <Rule Id="SA1629" Action="None" /><!--DocumentationTextMustEndWithAPeriod-->
    <!--A section of the Xml header documentation for a C# element does not end with a period (also known as a full stop).-->

    <Rule Id="SA1630" Action="None" /><!--DocumentationTextMustContainWhitespace-->
    <!--A section of the Xml header documentation for a C# element does not contain any whitespace between words.-->

    <Rule Id="SA1631" Action="None" /><!--DocumentationMustMeetCharacterPercentage-->
    <!--A section of the Xml header documentation for a C# element does not contain enough alphabetic characters.-->

    <Rule Id="SA1632" Action="None" /><!--DocumentationTextMustMeetMinimumCharacterLength-->
    <!--From StyleCop 4.5 this rule is disabled by default.-->

    <Rule Id="SA1633" Action="None" /><!--FileMustHaveHeader-->
    <!--A C# code file is missing a standard file header.-->

    <Rule Id="SA1634" Action="None" /><!--FileHeaderMustShowCopyright-->
    <!--The file header at the top of a C# code file is missing a copyright tag.-->

    <Rule Id="SA1635" Action="None" /><!--FileHeaderMustHaveCopyrightText-->
    <!--The file header at the top of a C# code file is missing copyright text.-->

    <Rule Id="SA1636" Action="None" /><!--FileHeaderCopyrightTextMustMatch-->
    <!--The file header at the top of a C# code file does not contain the appropriate copyright text.-->

    <Rule Id="SA1637" Action="None" /><!--FileHeaderMustContainFileName-->
    <!--The file header at the top of a C# code file is missing the file name.-->

    <Rule Id="SA1638" Action="None" /><!--FileHeaderFileNameDocumentationMustMatchFileName-->
    <!--The file tag within the file header at the top of a C# code file does not contain the name of the file.-->

    <Rule Id="SA1639" Action="None" /><!--FileHeaderMustHaveSummary-->
    <!--The file header at the top of a C# code file does not contain a filled-in summary tag.-->

    <Rule Id="SA1640" Action="None" /><!--FileHeaderMustHaveValidCompanyText-->
    <!--The file header at the top of a C# code file does not contain company name text.-->

    <Rule Id="SA1641" Action="None" /><!--FileHeaderCompanyNameTextMustMatch-->
    <!--The file header at the top of a C# code file does not contain the appropriate company name text.-->

    <Rule Id="SA1642" Action="None" /><!--ConstructorSummaryDocumentationMustBeginWithStandardText-->
    <!--The XML documentation header for a C# constructor does not contain the appropriate summary text.-->

    <Rule Id="SA1643" Action="None" /><!--DestructorSummaryDocumentationMustBeginWithStandardText-->
    <!--The Xml documentation header for a C# finalizer does not contain the appropriate summary text.-->

    <Rule Id="SA1644" Action="None" /><!--DocumentationHeadersMustNotContainBlankLines-->
    <!--A section within the Xml documentation header for a C# element contains blank lines.-->

    <Rule Id="SA1645" Action="None" /><!--IncludedDocumentationFileDoesNotExist-->
    <!--An included Xml documentation file does not exist.-->

    <Rule Id="SA1646" Action="None" /><!--IncludedDocumentationXPathDoesNotExist-->
    <!--An included Xml documentation link contains an invalid path.-->

    <Rule Id="SA1647" Action="None" /><!--IncludeNodeDoesNotContainValidFileAndPath-->
    <!--An include tag within an Xml documentation header does not contain valid file and path attribute.-->

    <Rule Id="SA1648" Action="None" /><!--InheritDocMustBeUsedWithInheritingClass-->
    <!--<code>&lt;inheritdoc&gt;</code> has been used on an element that doesn't inherit from a base class or implement an interface.-->


    <Rule Id="SA1649" Action="Warning" /><!--FileNameMustMatchTypeName-->
    <!--The file name of a C# code file does not match the first type declared in the file.-->

    <Rule Id="SA1650" Action="None" /><!--ElementDocumentationMustBeSpelledCorrectly-->
    <!--The element documentation for the element contains one or more spelling mistakes or unrecognized words.-->

    <Rule Id="SA1651" Action="None" /><!--DoNotUsePlaceholderElements-->
    <!--The documentation for the element contains one or more <code>&lt;placeholder&gt;</code> elements.-->

    <Rule Id="SA1652" Action="None" /><!--EnableXmlDocumentationOutput-->
    <!--This rule was moved to <a href="/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0001<Rule Id="SA0001" Action="Warning" /> -->



    <!-- Layout Rules (SA1500-) -->

    <Rule Id="SA1500" Action="Warning" /><!--BracesForMultiLineStatementsMustNotShareLine-->
    <!--The opening or closing brace within a C# statement, element, or expression is not placed on its own line.-->

    <Rule Id="SA1501" Action="Warning" /><!--StatementMustNotBeOnSingleLine-->
    <!--A C# statement containing opening and closing braces is written completely on a single line.-->

    <Rule Id="SA1502" Action="Warning" /><!--ElementMustNotBeOnSingleLine-->
    <!--A C# element containing opening and closing braces is written completely on a single line.-->

    <Rule Id="SA1503" Action="Warning" /><!--BracesMustNotBeOmitted-->
    <!--The opening and closing braces for a C# statement have been omitted.-->

    <Rule Id="SA1504" Action="Warning" /><!--AllAccessorsMustBeSingleLineOrMultiLine-->
    <!--Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines.-->

    <Rule Id="SA1505" Action="Warning" /><!--OpeningBracesMustNotBeFollowedByBlankLine-->
    <!--An opening brace within a C# element, statement, or expression is followed by a blank line.-->

    <Rule Id="SA1506" Action="Warning" /><!--ElementDocumentationHeadersMustNotBeFollowedByBlankLine-->
    <!--An element documentation header above a C# element is followed by a blank line.-->

    <Rule Id="SA1507" Action="Warning" /><!--CodeMustNotContainMultipleBlankLinesInARow-->
    <!--The C# code contains multiple blank lines in a row.-->

    <Rule Id="SA1508" Action="Warning" /><!--ClosingBracesMustNotBePrecededByBlankLine-->
    <!--A closing brace within a C# element, statement, or expression is preceded by a blank line.-->

    <Rule Id="SA1509" Action="Warning" /><!--OpeningBracesMustNotBePrecededByBlankLine-->
    <!--An opening brace within a C# element, statement, or expression is preceded by a blank line.-->

    <Rule Id="SA1510" Action="Warning" /><!--ChainedStatementBlocksMustNotBePrecededByBlankLine-->
    <!--Chained C# statements are separated by a blank line.-->

    <Rule Id="SA1511" Action="Warning" /><!--WhileDoFooterMustNotBePrecededByBlankLine-->
    <!--The while footer at the bottom of a do-while statement is separated from the statement by a blank line.-->

    <Rule Id="SA1512" Action="Warning" /><!--SingleLineCommentsMustNotBeFollowedByBlankLine-->
    <!--A single-line comment within C# code is followed by a blank line.-->

    <Rule Id="SA1513" Action="Warning" /><!--ClosingBraceMustBeFollowedByBlankLine-->
    <!--A closing brace within a C# element, statement, or expression is not followed by a blank line.-->

    <Rule Id="SA1514" Action="Warning" /><!--ElementDocumentationHeaderMustBePrecededByBlankLine-->
    <!--An element documentation header above a C# element is not preceded by a blank line.-->

    <Rule Id="SA1515" Action="Warning" /><!--SingleLineCommentMustBePrecededByBlankLine-->
    <!--A single-line comment within C# code is not preceded by a blank line.-->

    <Rule Id="SA1516" Action="Warning" /><!--ElementsMustBeSeparatedByBlankLine-->
    <!--Adjacent C# elements are not separated by a blank line.-->

    <Rule Id="SA1517" Action="Warning" /><!--CodeMustNotContainBlankLinesAtStartOfFile-->
    <!--The code file has blank lines at the start.-->

    <Rule Id="SA1518" Action="Warning" /><!--UseLineEndingsCorrectlyAtEndOfFile-->
    <!--The line endings at the end of a file do not match the settings for the project.-->

    <Rule Id="SA1519" Action="Warning" /><!--BracesMustNotBeOmittedFromMultiLineChildStatement-->
    <!--The opening and closing braces for a multi-line C# statement have been omitted.-->

    <Rule Id="SA1520" Action="Warning" /><!--UseBracesConsistently-->
    <!--The opening and closing braces of a chained <code>if</code>/<code>else if</code>/<code>else</code> construct were included for some clauses, but omitted for others.-->



    <!-- Maintainability Rules (SA1400-) -->

    <Rule Id="SA1119" Action="Warning" /><!--StatementMustNotUseUnnecessaryParenthesis-->
    <!--A C# statement contains parenthesis which are unnecessary and should be removed.-->

    <Rule Id="SA1400" Action="Warning" /><!--AccessModifierMustBeDeclared-->
    <!--The access modifier for a C# element has not been explicitly defined.-->

    <Rule Id="SA1401" Action="Warning" /><!--FieldsMustBePrivate-->
    <!--A field within a C# class has an access modifier other than private.-->

    <Rule Id="SA1402" Action="Warning" /><!--FileMayOnlyContainASingleType-->
    <!--A C# code file contains more than one unique type.-->

    <Rule Id="SA1403" Action="Warning" /><!--FileMayOnlyContainASingleNamespace-->
    <!--A C# code file contains more than one namespace.-->

    <Rule Id="SA1404" Action="Warning" /><!--CodeAnalysisSuppressionMustHaveJustification-->
    <!--A Code Analysis SuppressMessage attribute does not include a justification.-->

    <Rule Id="SA1405" Action="Warning" /><!--DebugAssertMustProvideMessageText-->
    <!--A call to Debug.Assert in C# code does not include a descriptive message.-->

    <Rule Id="SA1406" Action="Warning" /><!--DebugFailMustProvideMessageText-->
    <!--A call to Debug.Fail in C# code does not include a descriptive message.-->

    <Rule Id="SA1407" Action="Warning" /><!--ArithmeticExpressionsMustDeclarePrecedence-->
    <!--A C# statement contains a complex arithmetic expression which omits parenthesis around operators.-->

    <Rule Id="SA1408" Action="Warning" /><!--ConditionalExpressionsMustDeclarePrecedence-->
    <!--A C# statement contains a complex conditional expression which omits parenthesis around operators.-->

    <Rule Id="SA1409" Action="Warning" /><!--RemoveUnnecessaryCode-->
    <!--A C# file contains code which is unnecessary and can be removed without changing the overall logic of the code.-->

    <Rule Id="SA1410" Action="Warning" /><!--RemoveDelegateParenthesisWhenPossible-->
    <!--A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis.-->

    <Rule Id="SA1411" Action="Warning" /><!--AttributeConstructorMustNotUseUnnecessaryParenthesis-->
    <!--An attribute declaration does not contain any parameters, yet it still includes parenthesis.-->

    <Rule Id="SA1412" Action="None" /><!--StoreFilesAsUtf8-->
    <!--The encoding of the file is not UTF-8 with byte order mark.-->

    <Rule Id="SA1413" Action="None" /><!--UseTrailingCommasInMultiLineInitializers-->
    <!--A multi-line initializer should use a comma on the last item.-->

    <Rule Id="SA1414" Action="Warning" /><!--TupleTypesInSignaturesShouldHaveElementNames-->
    <!--Tuple types appearing in member declarations should have explicitly named tuple elements.-->


    <!-- Naming Rules (SA1300-) -->

    <Rule Id="SA1300" Action="Warning" /><!--ElementMustBeginWithUpperCaseLetter-->
    <!--The name of a C# element does not begin with an upper-case letter.-->

    <Rule Id="SA1301" Action="Warning" /><!--ElementMustBeginWithLowerCaseLetter-->
    <!--There are currently no situations in which this rule will fire.-->

    <Rule Id="SA1302" Action="Warning" /><!--InterfaceNamesMustBeginWithI-->
    <!--The name of a C# interface does not begin with the capital letter I.-->

    <Rule Id="SA1303" Action="Warning" /><!--ConstFieldNamesMustBeginWithUpperCaseLetter-->
    <!--The name of a constant C# field should begin with an upper-case letter.-->

    <Rule Id="SA1304" Action="Warning" /><!--NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter-->
    <!--The name of a non-private readonly C# field should being with an upper-case letter.-->

    <Rule Id="SA1305" Action="Warning" /><!--FieldNamesMustNotUseHungarianNotation-->
    <!--The name of a field or variable in C# uses Hungarian notation.-->

    <Rule Id="SA1306" Action="Warning" /><!--FieldNamesMustBeginWithLowerCaseLetter-->
    <!--The name of a field in C# does not begin with a lower-case letter.-->

    <Rule Id="SA1307" Action="Warning" /><!--AccessibleFieldsMustBeginWithUpperCaseLetter-->
    <!--The name of a public or internal field in C# does not begin with an upper-case letter.-->

    <Rule Id="SA1308" Action="Warning" /><!--VariableNamesMustNotBePrefixed-->
    <!--A field name in C# is prefixed with <em>m_</em> or <em>s_</em>.-->

    <Rule Id="SA1309" Action="Warning" /><!--FieldNamesMustNotBeginWithUnderscore-->
    <!--A field name in C# begins with an underscore.-->

    <Rule Id="SA1310" Action="Warning" /><!--FieldNamesMustNotContainUnderscore-->
    <!--A field name in C# contains an underscore.-->

    <Rule Id="SA1311" Action="Warning" /><!--StaticReadonlyFieldsMustBeginWithUpperCaseLetter-->
    <!--The name of a static readonly field does not begin with an upper-case letter.-->

    <Rule Id="SA1312" Action="Warning" /><!--VariableNamesMustBeginWithLowerCaseLetter-->
    <!--The name of a variable in C# does not begin with a lower-case letter.-->

    <Rule Id="SA1313" Action="Warning" /><!--ParameterNamesMustBeginWithLowerCaseLetter-->
    <!--The name of a parameter in C# does not begin with a lower-case letter.-->

    <Rule Id="SA1314" Action="Warning" /><!--TypeParameterNamesMustBeginWithT-->
    <!--The name of a C# type parameter does not begin with the capital letter T.-->

    <Rule Id="SA1316" Action="Warning" /><!--TupleElementNamesShouldUseCorrectCasing-->
    <!--Element names within a tuple type should have the correct casing.-->


    <!-- Ordering Rules (SA1200-) -->

    <Rule Id="SA1200" Action="Warning" /><!--UsingDirectivesMustBePlacedCorrectly-->
    <!--A C# using directive is placed outside of a namespace element.-->

    <Rule Id="SA1201" Action="Warning" /><!--ElementsMustAppearInTheCorrectOrder-->
    <!--An element within a C# code file is out of order in relation to the other elements in the code.-->

    <Rule Id="SA1202" Action="Warning" /><!--ElementsMustBeOrderedByAccess-->
    <!--An element within a C# code file is out of order within regard to access level, in relation to other elements in the code.-->

    <Rule Id="SA1203" Action="Warning" /><!--ConstantsMustAppearBeforeFields-->
    <!--A constant field is placed beneath a non-constant field.-->

    <Rule Id="SA1204" Action="Warning" /><!--StaticElementsMustAppearBeforeInstanceElements-->
    <!--A static element is positioned beneath an instance element of the same type.-->

    <Rule Id="SA1205" Action="Warning" /><!--PartialElementsMustDeclareAccess-->
    <!--The partial element does not have an access modifier defined.-->

    <Rule Id="SA1206" Action="Warning" /><!--DeclarationKeywordsMustFollowOrder-->
    <!--The keywords within the declaration of an element do not follow a standard ordering scheme.-->

    <Rule Id="SA1207" Action="Warning" /><!--ProtectedMustComeBeforeInternal-->
    <!--The keyword <em>protected</em> is positioned after the keyword <em>internal</em> within the declaration of a protected internal C# element.-->

    <Rule Id="SA1208" Action="Warning" /><!--SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives-->
    <!--A using directive which declares a member of the <em>System</em> namespace appears after a using directive which declares a member of a different namespace, within a C# code file.-->

    <Rule Id="SA1209" Action="Warning" /><!--UsingAliasDirectivesMustBePlacedAfterOtherUsingDirectives-->
    <!--A using-alias directive is positioned before a regular using directive.-->

    <Rule Id="SA1210" Action="Warning" /><!--UsingDirectivesMustBeOrderedAlphabeticallyByNamespace-->
    <!--The using directives within a C# code file are not sorted alphabetically by namespace.-->

    <Rule Id="SA1211" Action="Warning" /><!--UsingAliasDirectivesMustBeOrderedAlphabeticallyByAliasName-->
    <!--The using-alias directives within a C# code file are not sorted alphabetically by alias name.-->

    <Rule Id="SA1212" Action="Warning" /><!--PropertyAccessorsMustFollowOrder-->
    <!--A get accessor appears after a set accessor within a property or indexer.-->

    <Rule Id="SA1213" Action="Warning" /><!--EventAccessorsMustFollowOrder-->
    <!--An add accessor appears after a remove accessor within an event.-->

    <Rule Id="SA1214" Action="Warning" /><!--ReadonlyElementsMustAppearBeforeNonReadonlyElements-->
    <!--A readonly field is positioned beneath a non-readonly field.-->

    <Rule Id="SA1215" Action="Warning" /><!--InstanceReadonlyElementsMustAppearBeforeInstanceNonReadonlyElements-->
    <!--An instance readonly element is positioned beneath an instance non-readonly element of the same type.-->

    <Rule Id="SA1216" Action="Warning" /><!--UsingStaticDirectivesMustBePlacedAtTheCorrectLocation-->
    <!--A <code>using static</code> directive is positioned at the wrong location (before a regular using directive or after an alias using directive).-->

    <Rule Id="SA1217" Action="Warning" /><!--UsingStaticDirectivesMustBeOrderedAlphabetically-->
    <!--The <code>using static</code> directives within a C# code file are not sorted alphabetically by full type name.-->


    <!-- Readability Rules (SA1100-) -->

    <Rule Id="SA1100" Action="Warning" /><!--DoNotPrefixCallsWithBaseUnlessLocalImplementationExists-->
    <!--A call to a member from an inherited class begins with <code>base.</code>, and the local class does not contain an override or implementation of the member.-->

    <Rule Id="SA1101" Action="Warning" /><!--PrefixLocalCallsWithThis-->
    <!--A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file.-->

    <Rule Id="SA1102" Action="Warning" /><!--QueryClauses-->
    <!--A C# query clause does not begin on the same line as the previous clause, or on the next line.-->

    <Rule Id="SA1103" Action="Warning" /><!--QueryClauses-->
    <!--The clauses within a C# query expression are not all placed on the same line, and each clause is not placed on its own line.-->

    <Rule Id="SA1104" Action="Warning" /><!--QueryClauses-->
    <!--A clause within a C# query expression begins on the same line as the previous clause, when the previous clause spans across multiple lines.-->

    <Rule Id="SA1105" Action="Warning" /><!--QueryClauses-->
    <!--A clause within a C# query expression spans across multiple lines, and does not begin on its own line.-->

    <Rule Id="SA1106" Action="Warning" /><!--CodeMustNotContainEmptyStatements-->
    <!--The C# code contains an extra semicolon.-->

    <Rule Id="SA1107" Action="Warning" /><!--CodeMustNotContainMultipleStatementsOnOneLine-->
    <!--The C# code contains more than one statement on a single line.-->

    <Rule Id="SA1108" Action="Warning" /><!--BlockStatementsMustNotContainEmbeddedComments-->
    <!--A C# statement contains a comment between the declaration of the statement and the opening brace of the statement.-->

    <Rule Id="SA1109" Action="Warning" /><!--BlockStatementsMustNotContainEmbeddedRegions-->
    <!--A C# statement contains a region tag between the declaration of the statement and the opening brace of the statement.-->

    <Rule Id="SA1110" Action="Warning" /><!--OpeningParenthesisMustBeOnDeclarationLine-->
    <!--The opening parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the method or indexer name.-->

    <Rule Id="SA1111" Action="Warning" /><!--ClosingParenthesisMustBeOnLineOfLastParameter-->
    <!--The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the last parameter.-->

    <Rule Id="SA1112" Action="Warning" /><!--ClosingParenthesisMustBeOnLineOfOpeningParenthesis-->
    <!--The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the opening bracket when the element does not take any parameters.-->

    <Rule Id="SA1113" Action="Warning" /><!--CommaMustBeOnSameLineAsPreviousParameter-->
    <!--A comma between two parameters in a call to a C# method or indexer, or in the declaration of a method or indexer, is not placed on the same line as the previous parameter.-->

    <Rule Id="SA1114" Action="Warning" /><!--ParameterListMustFollowDeclaration-->
    <!--The start of the parameter list for a method or indexer call or declaration does not begin on the same line as the opening bracket, or on the line after the opening bracket.-->

    <Rule Id="SA1115" Action="Warning" /><!--ParameterMustFollowComma-->
    <!--A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous parameter, or on the next line.-->

    <Rule Id="SA1116" Action="Warning" /><!--SplitParametersMustStartOnLineAfterDeclaration-->
    <!--The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket.-->

    <Rule Id="SA1117" Action="Warning" /><!--ParametersMustBeOnSameLineOrSeparateLines-->
    <!--The parameters to a C# method or indexer call or declaration are not all on the same line or each on a separate line.-->

    <Rule Id="SA1118" Action="Warning" /><!--ParameterMustNotSpanMultipleLines-->
    <!--A parameter to a C# method or indexer, other than the first parameter, spans across multiple lines.-->

    <Rule Id="SA1120" Action="Warning" /><!--CommentsMustContainText-->
    <!--The C# comment does not contain any comment text.-->

    <Rule Id="SA1121" Action="Warning" /><!--UseBuiltInTypeAlias-->
    <!--The code uses one of the basic C# types, but does not use the built-in alias for the type.-->

    <Rule Id="SA1122" Action="Warning" /><!--UseStringEmptyForEmptyStrings-->
    <!--The C# code includes an empty string, written as <code>""</code>.-->

    <Rule Id="SA1123" Action="Warning" /><!--DoNotPlaceRegionsWithinElements-->
    <!--The C# code contains a region within the body of a code element.-->

    <Rule Id="SA1124" Action="None" /><!--DoNotUseRegions-->
    <!--The C# code contains a region.-->

    <Rule Id="SA1125" Action="Warning" /><!--UseShorthandForNullableTypes-->
    <!--The Nullable type has been defined not using the C# shorthand.-->

    <Rule Id="SA1126" Action="Warning" /><!--PrefixCallsCorrectly-->
    <!--A call to a member is not prefixed with the 'this.', 'base.', 'object.' or 'typename.' prefix to indicate the intended method call, within a C# code file.-->

    <Rule Id="SA1127" Action="Warning" /><!--GenericTypeConstraintsMustBeOnOwnLine-->
    <!--A generic constraint on a type or method declaration is on the same line as the declaration, within a C# code file.-->

    <Rule Id="SA1128" Action="Warning" /><!--ConstructorInitializerMustBeOnOwnLine-->
    <!--A constructor initializer is on the same line as the constructor declaration, within a C# code file.-->

    <Rule Id="SA1129" Action="Warning" /><!--DoNotUseDefaultValueTypeConstructor-->
    <!--A value type was constructed using the syntax <code>new T()</code>.-->

    <Rule Id="SA1130" Action="Warning" /><!--UseLambdaSyntax-->
    <!--An anonymous method was declared using the form <code>delegate (parameters) { }</code>, when a lambda expression would provide equivalent behavior with the syntax <code>(parameters) =&gt; { }</code>.-->

    <Rule Id="SA1131" Action="Warning" /><!--UseReadableConditions-->
    <!--A comparison was made between a variable and a literal or constant value, and the variable appeared on the right-hand side of the expression.-->

    <Rule Id="SA1132" Action="Warning" /><!--DoNotCombineFields-->
    <!--Two or more fields were declared in the same field declaration syntax.-->

    <Rule Id="SA1133" Action="Warning" /><!--DoNotCombineAttributes-->
    <!--Two or more attributes appeared within the same set of square brackets.-->

    <Rule Id="SA1134" Action="Warning" /><!--AttributesMustNotShareLine-->
    <!--An attribute is placed on the same line of code as another attribute or element.-->

    <Rule Id="SA1135" Action="Warning" /><!--UsingDirectivesMustBeQualified-->
    <!--A using directive is not qualified.-->

    <Rule Id="SA1136" Action="Warning" /><!--EnumValuesShouldBeOnSeparateLines-->
    <!--Multiple enum values are placed on the same line of code.-->

    <Rule Id="SA1137" Action="Warning" /><!--ElementsShouldHaveTheSameIndentation-->
    <!--Two sibling elements which each start on their own line have different levels of indentation.-->

    <Rule Id="SA1139" Action="Warning" /><!--UseLiteralsSuffixNotationInsteadOfCasting-->
    <!--Use literal suffix notation instead of casting.-->

    <Rule Id="SA1141" Action="Warning" /><!--UseTupleSyntax-->
    <!--Use tuple syntax instead of the underlying ValueTuple implementation type.-->

    <Rule Id="SA1142" Action="Warning" /><!--ReferToTupleElementsByName-->
    <!--An element of a tuple was referenced by its metadata name when an element name is available.-->


  </Rules>
  <Rules AnalyzerId="Microsoft.CodeAnalysis.FxCopAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.FxCopAnalyzers">
      <Rule Id="CA1000" Action="Warning" />          <!-- Do not declare static members on generic types -->
      <Rule Id="CA1001" Action="Warning" />          <!-- Types that own disposable fields should be disposable -->
      <Rule Id="CA1003" Action="None" />             <!-- Use generic event handler instances -->
      <Rule Id="CA1008" Action="Warning" />          <!-- Enums should have zero value -->
      <Rule Id="CA1010" Action="Warning" />          <!-- Collections should implement generic interface -->
      <Rule Id="CA1012" Action="None" />             <!-- Abstract types should not have constructors -->
      <Rule Id="CA1014" Action="None" />             <!-- Mark assemblies with CLSCompliant -->
      <Rule Id="CA1016" Action="Warning" />          <!-- Mark assemblies with assembly version -->
      <Rule Id="CA1017" Action="None" />             <!-- Mark assemblies with ComVisible -->
      <Rule Id="CA1018" Action="Warning" />          <!-- Mark attributes with AttributeUsageAttribute -->
      <Rule Id="CA1019" Action="None" />             <!-- Define accessors for attribute arguments -->
      <Rule Id="CA1024" Action="Warning" />          <!-- Use properties where appropriate -->
      <Rule Id="CA1027" Action="None" />             <!-- Mark enums with FlagsAttribute -->
      <Rule Id="CA1028" Action="Warning" />          <!-- Enum Storage should be Int32 -->
      <Rule Id="CA1030" Action="Warning" />          <!-- Use events where appropriate -->
      <Rule Id="CA1031" Action="Warning" />          <!-- Do not catch general exception types -->
      <Rule Id="CA1032" Action="Warning" />          <!-- Implement standard exception constructors -->
      <Rule Id="CA1033" Action="None" />             <!-- Interface methods should be callable by child types -->
      <Rule Id="CA1034" Action="None" />             <!-- Nested types should not be visible -->
      <Rule Id="CA1036" Action="Warning" />          <!-- Override methods on comparable types -->
      <Rule Id="CA1040" Action="Warning" />          <!-- Avoid empty interfaces -->
      <Rule Id="CA1041" Action="Warning" />          <!-- Provide ObsoleteAttribute message -->
      <Rule Id="CA1043" Action="Warning" />          <!-- Use Integral Or String Argument For Indexers -->
      <Rule Id="CA1044" Action="Warning" />          <!-- Properties should not be write only -->
      <Rule Id="CA1050" Action="Warning" />          <!-- Declare types in namespaces -->
      <Rule Id="CA1051" Action="Warning" />          <!-- Do not declare visible instance fields -->
      <Rule Id="CA1052" Action="Warning" />          <!-- Static holder types should be Static or NotInheritable -->
      <Rule Id="CA1054" Action="Warning" />          <!-- Uri parameters should not be strings -->
      <Rule Id="CA1055" Action="Warning" />          <!-- Uri return values should not be strings -->
      <Rule Id="CA1056" Action="None" />             <!-- Uri properties should not be strings -->
      <Rule Id="CA1058" Action="Warning" />          <!-- Types should not extend certain base types -->
      <Rule Id="CA1060" Action="None" />             <!-- Move pinvokes to native methods class -->
      <Rule Id="CA1061" Action="Warning" />          <!-- Do not hide base class methods -->
      <Rule Id="CA1062" Action="None" />             <!-- Validate arguments of public methods -->
      <Rule Id="CA1063" Action="Warning" />          <!-- Implement IDisposable Correctly -->
      <Rule Id="CA1064" Action="Warning" />          <!-- Exceptions should be public -->
      <Rule Id="CA1065" Action="Warning" />          <!-- Do not raise exceptions in unexpected locations -->
      <Rule Id="CA1066" Action="Warning" />          <!-- Type {0} should implement IEquatable<T> because it overrides Equals -->
      <Rule Id="CA1067" Action="Warning" />          <!-- Override Object.Equals(object) when implementing IEquatable<T> -->
      <Rule Id="CA1068" Action="Warning" />          <!-- CancellationToken parameters must come last -->
      <Rule Id="CA1200" Action="Warning" />          <!-- Avoid using cref tags with a prefix -->
      <Rule Id="CA1303" Action="None" />             <!-- Do not pass literals as localized parameters -->
      <Rule Id="CA1304" Action="None" />             <!-- Specify CultureInfo -->
      <Rule Id="CA1305" Action="Warning" />          <!-- Specify IFormatProvider -->
      <Rule Id="CA1307" Action="None" />             <!-- Specify StringComparison -->
      <Rule Id="CA1308" Action="None" />             <!-- Normalize strings to uppercase -->
      <Rule Id="CA1309" Action="Warning" />          <!-- Use ordinal stringcomparison -->
      <Rule Id="CA1401" Action="Warning" />          <!-- P/Invokes should not be visible -->
      <Rule Id="CA1501" Action="None" />             <!-- Avoid excessive inheritance -->
      <Rule Id="CA1502" Action="Warning" />          <!-- Avoid excessive complexity -->
      <Rule Id="CA1505" Action="Warning" />          <!-- Avoid unmaintainable code -->
      <Rule Id="CA1506" Action="None" />             <!-- Avoid excessive class coupling -->
      <Rule Id="CA1507" Action="Warning" />          <!-- Use nameof to express symbol names -->
      <Rule Id="CA1508" Action="Warning" />          <!-- Avoid dead conditional code -->
      <Rule Id="CA1509" Action="Warning" />          <!-- Invalid entry in code metrics rule specification file -->
      <Rule Id="CA1707" Action="Warning" />          <!-- Identifiers should not contain underscores -->
      <Rule Id="CA1708" Action="Warning" />          <!-- Identifiers should differ by more than case -->
      <Rule Id="CA1710" Action="None" />             <!-- Identifiers should have correct suffix -->
      <Rule Id="CA1711" Action="Warning" />          <!-- Identifiers should not have incorrect suffix -->
      <Rule Id="CA1712" Action="Warning" />          <!-- Do not prefix enum values with type name -->
      <Rule Id="CA1714" Action="Warning" />          <!-- Flags enums should have plural names -->
      <Rule Id="CA1715" Action="Warning" />          <!-- Identifiers should have correct prefix -->
      <Rule Id="CA1716" Action="Warning" />          <!-- Identifiers should not match keywords -->
      <Rule Id="CA1717" Action="Warning" />          <!-- Only FlagsAttribute enums should have plural names -->
      <Rule Id="CA1720" Action="Warning" />          <!-- Identifier contains type name -->
      <Rule Id="CA1721" Action="Warning" />          <!-- Property names should not match get methods -->
      <Rule Id="CA1724" Action="Warning" />          <!-- Type names should not match namespaces -->
      <Rule Id="CA1725" Action="None" />             <!-- Parameter names should match base declaration -->
      <Rule Id="CA1801" Action="Warning" />          <!-- Review unused parameters -->
      <Rule Id="CA1802" Action="Warning" />          <!-- Use literals where appropriate -->
      <Rule Id="CA1806" Action="Warning" />          <!-- Do not ignore method results -->
      <Rule Id="CA1810" Action="Warning" />          <!-- Initialize reference type static fields inline -->
      <Rule Id="CA1812" Action="Warning" />          <!-- Avoid uninstantiated internal classes -->
      <Rule Id="CA1813" Action="Warning" />          <!-- Avoid unsealed attributes -->
      <Rule Id="CA1814" Action="Warning" />          <!-- Prefer jagged arrays over multidimensional -->
      <Rule Id="CA1815" Action="Warning" />          <!-- Override equals and operator equals on value types -->
      <Rule Id="CA1816" Action="Warning" />          <!-- Dispose methods should call SuppressFinalize -->
      <Rule Id="CA1819" Action="None" />             <!-- Properties should not return arrays -->
      <Rule Id="CA1820" Action="Warning" />          <!-- Test for empty strings using string length -->
      <Rule Id="CA1821" Action="Warning" />          <!-- Remove empty Finalizers -->
      <Rule Id="CA1822" Action="None" />             <!-- Mark members as static -->
      <Rule Id="CA1823" Action="Warning" />          <!-- Avoid unused private fields -->
      <Rule Id="CA1824" Action="Warning" />          <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
      <Rule Id="CA1825" Action="Warning" />          <!-- Avoid zero-length array allocations. -->
      <Rule Id="CA1826" Action="Warning" />          <!-- Do not use Enumerable methods on indexable collections. Instead use the collection directly -->
      <Rule Id="CA1827" Action="Warning" />          <!-- Do not use Count() or LongCount() when Any() can be used -->
      <Rule Id="CA1828" Action="Warning" />          <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used -->
      <Rule Id="CA1829" Action="Warning" />          <!-- Use Length/Count property instead of Count() when available -->
      <Rule Id="CA2000" Action="Warning" />          <!-- Dispose objects before losing scope -->
      <Rule Id="CA2002" Action="Warning" />          <!-- Do not lock on objects with weak identity -->
      <Rule Id="CA2007" Action="None" />             <!-- Consider calling ConfigureAwait on the awaited task -->
      <Rule Id="CA2008" Action="Warning" />          <!-- Do not create tasks without passing a TaskScheduler -->
      <Rule Id="CA2009" Action="Warning" />          <!-- Do not call ToImmutableCollection on an ImmutableCollection value -->
      <Rule Id="CA2010" Action="Warning" />          <!-- Always consume the value returned by methods marked with PreserveSigAttribute -->
      <Rule Id="CA2100" Action="Warning" />          <!-- Review SQL queries for security vulnerabilities -->
      <Rule Id="CA2101" Action="Warning" />          <!-- Specify marshaling for P/Invoke string arguments -->
      <Rule Id="CA2119" Action="Warning" />          <!-- Seal methods that satisfy private interfaces -->
      <Rule Id="CA2153" Action="Warning" />          <!-- Do Not Catch Corrupted State Exceptions -->
      <Rule Id="CA2200" Action="Warning" />          <!-- Rethrow to preserve stack details. -->
      <Rule Id="CA2201" Action="Warning" />          <!-- Do not raise reserved exception types -->
      <Rule Id="CA2207" Action="Warning" />          <!-- Initialize value type static fields inline -->
      <Rule Id="CA2208" Action="Warning" />          <!-- Instantiate argument exceptions correctly -->
      <Rule Id="CA2211" Action="Warning" />          <!-- Non-constant fields should not be visible -->
      <Rule Id="CA2213" Action="Warning" />          <!-- Disposable fields should be disposed -->
      <Rule Id="CA2214" Action="None" />             <!-- Do not call overridable methods in constructors -->
      <Rule Id="CA2216" Action="Warning" />          <!-- Disposable types should declare finalizer -->
      <Rule Id="CA2217" Action="None" />             <!-- Do not mark enums with FlagsAttribute -->
      <Rule Id="CA2218" Action="Warning" />          <!-- Override GetHashCode on overriding Equals -->
      <Rule Id="CA2219" Action="Warning" />          <!-- Do not raise exceptions in finally clauses -->
      <Rule Id="CA2224" Action="Warning" />          <!-- Override Equals on overloading operator equals -->
      <Rule Id="CA2225" Action="Warning" />          <!-- Operator overloads have named alternates -->
      <Rule Id="CA2226" Action="Warning" />          <!-- Operators should have symmetrical overloads -->
      <Rule Id="CA2227" Action="None" />             <!-- Collection properties should be read only -->
      <Rule Id="CA2229" Action="Warning" />          <!-- Implement serialization constructors -->
      <Rule Id="CA2231" Action="Warning" />          <!-- Overload operator equals on overriding value type Equals -->
      <Rule Id="CA2234" Action="None" />             <!-- Pass system uri objects instead of strings -->
      <Rule Id="CA2235" Action="None" />             <!-- Mark all non-serializable fields -->
      <Rule Id="CA2237" Action="Warning" />          <!-- Mark ISerializable types with serializable -->
      <Rule Id="CA2241" Action="Warning" />          <!-- Provide correct arguments to formatting methods -->
      <Rule Id="CA2242" Action="Warning" />          <!-- Test for NaN correctly -->
      <Rule Id="CA2243" Action="Warning" />          <!-- Attribute string literals should parse correctly -->
      <Rule Id="CA2244" Action="Warning" />          <!-- Do not duplicate indexed element initializations -->
      <Rule Id="CA2245" Action="Warning" />          <!-- Do not assign a property to itself. -->
      <Rule Id="CA2246" Action="Warning" />          <!-- Assigning symbol and its member in the same statement. -->
      <Rule Id="CA2300" Action="None" />             <!-- Do not use insecure deserializer BinaryFormatter -->
      <Rule Id="CA2301" Action="None" />             <!-- Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder -->
      <Rule Id="CA2302" Action="None" />             <!-- Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize -->
      <Rule Id="CA2305" Action="None" />             <!-- Do not use insecure deserializer LosFormatter -->
      <Rule Id="CA2310" Action="None" />             <!-- Do not use insecure deserializer NetDataContractSerializer -->
      <Rule Id="CA2311" Action="None" />             <!-- Do not deserialize without first setting NetDataContractSerializer.Binder -->
      <Rule Id="CA2312" Action="None" />             <!-- Ensure NetDataContractSerializer.Binder is set before deserializing -->
      <Rule Id="CA2315" Action="None" />             <!-- Do not use insecure deserializer ObjectStateFormatter -->
      <Rule Id="CA2321" Action="None" />             <!-- Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver -->
      <Rule Id="CA2322" Action="None" />             <!-- Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing -->
      <Rule Id="CA2326" Action="None" />             <!-- Do not use TypeNameHandling values other than None -->
      <Rule Id="CA2327" Action="None" />             <!-- Do not use insecure JsonSerializerSettings -->
      <Rule Id="CA2328" Action="None" />             <!-- Ensure that JsonSerializerSettings are secure -->
      <Rule Id="CA2329" Action="None" />             <!-- Do not deserialize with JsonSerializer using an insecure configuration -->
      <Rule Id="CA2330" Action="None" />             <!-- Ensure that JsonSerializer has a secure configuration when deserializing -->
      <Rule Id="CA3001" Action="None" />             <!-- Review code for SQL injection vulnerabilities -->
      <Rule Id="CA3002" Action="None" />             <!-- Review code for XSS vulnerabilities -->
      <Rule Id="CA3003" Action="None" />             <!-- Review code for file path injection vulnerabilities -->
      <Rule Id="CA3004" Action="None" />             <!-- Review code for information disclosure vulnerabilities -->
      <Rule Id="CA3005" Action="None" />             <!-- Review code for LDAP injection vulnerabilities -->
      <Rule Id="CA3006" Action="None" />             <!-- Review code for process command injection vulnerabilities -->
      <Rule Id="CA3007" Action="None" />             <!-- Review code for open redirect vulnerabilities -->
      <Rule Id="CA3008" Action="None" />             <!-- Review code for XPath injection vulnerabilities -->
      <Rule Id="CA3009" Action="None" />             <!-- Review code for XML injection vulnerabilities -->
      <Rule Id="CA3010" Action="None" />             <!-- Review code for XAML injection vulnerabilities -->
      <Rule Id="CA3011" Action="None" />             <!-- Review code for DLL injection vulnerabilities -->
      <Rule Id="CA3012" Action="None" />             <!-- Review code for regex injection vulnerabilities -->
      <Rule Id="CA3061" Action="Warning" />          <!-- Do Not Add Schema By URL -->
      <Rule Id="CA3075" Action="Warning" />          <!-- Insecure DTD processing in XML -->
      <Rule Id="CA3076" Action="Warning" />          <!-- Insecure XSLT script processing. -->
      <Rule Id="CA3077" Action="Warning" />          <!-- Insecure Processing in API Design, XmlDocument and XmlTextReader -->
      <Rule Id="CA3147" Action="Warning" />          <!-- Mark Verb Handlers With Validate Antiforgery Token -->
      <Rule Id="CA5350" Action="Warning" />          <!-- Do Not Use Weak Cryptographic Algorithms -->
      <Rule Id="CA5351" Action="Warning" />          <!-- Do Not Use Broken Cryptographic Algorithms -->
      <Rule Id="CA5358" Action="Warning" />          <!-- Do Not Use Unsafe Cipher Modes -->
      <Rule Id="CA5359" Action="Warning" />          <!-- Do Not Disable Certificate Validation -->
      <Rule Id="CA5360" Action="Warning" />          <!-- Do Not Call Dangerous Methods In Deserialization -->
      <Rule Id="CA5361" Action="Warning" />          <!-- Do Not Disable SChannel Use of Strong Crypto -->
      <Rule Id="CA5362" Action="None" />             <!-- Do Not Refer Self In Serializable Class -->
      <Rule Id="CA5363" Action="Warning" />          <!-- Do Not Disable Request Validation -->
      <Rule Id="CA5364" Action="Warning" />          <!-- Do Not Use Deprecated Security Protocols -->
      <Rule Id="CA5365" Action="Warning" />          <!-- Do Not Disable HTTP Header Checking -->
      <Rule Id="CA5366" Action="Warning" />          <!-- Use XmlReader For DataSet Read Xml -->
      <Rule Id="CA5367" Action="None" />             <!-- Do Not Serialize Types With Pointer Fields -->
      <Rule Id="CA5368" Action="Warning" />          <!-- Set ViewStateUserKey For Classes Derived From Page -->
      <Rule Id="CA5369" Action="Warning" />          <!-- Use XmlReader For Deserialize -->
      <Rule Id="CA5370" Action="Warning" />          <!-- Use XmlReader For Validating Reader -->
      <Rule Id="CA5371" Action="Warning" />          <!-- Use XmlReader For Schema Read -->
      <Rule Id="CA5372" Action="Warning" />          <!-- Use XmlReader For XPathDocument -->
      <Rule Id="CA5373" Action="Warning" />          <!-- Do not use obsolete key derivation function -->
      <Rule Id="CA5374" Action="Warning" />          <!-- Do Not Use XslTransform -->
      <Rule Id="CA5375" Action="None" />             <!-- Do Not Use Account Shared Access Signature -->
      <Rule Id="CA5376" Action="Warning" />          <!-- Use SharedAccessProtocol HttpsOnly -->
      <Rule Id="CA5377" Action="Warning" />          <!-- Use Container Level Access Policy -->
      <Rule Id="CA5378" Action="Warning" />          <!-- Do not disable ServicePointManagerSecurityProtocols -->
      <Rule Id="CA5379" Action="Warning" />          <!-- Do Not Use Weak Key Derivation Function Algorithm -->
      <Rule Id="CA5380" Action="Warning" />          <!-- Do Not Add Certificates To Root Store -->
      <Rule Id="CA5381" Action="Warning" />          <!-- Ensure Certificates Are Not Added To Root Store -->
      <Rule Id="CA5382" Action="None" />             <!-- Use Secure Cookies In ASP.Net Core -->
      <Rule Id="CA5383" Action="None" />             <!-- Ensure Use Secure Cookies In ASP.Net Core -->
      <Rule Id="CA5384" Action="Warning" />          <!-- Do Not Use Digital Signature Algorithm (DSA) -->
      <Rule Id="CA5385" Action="Warning" />          <!-- Use Rivest–Shamir–Adleman (RSA) Algorithm With Sufficient Key Size -->
      <Rule Id="CA5386" Action="None" />             <!-- Avoid hardcoding SecurityProtocolType value -->
      <Rule Id="CA5387" Action="Warning" />          <!-- Do Not Use Weak Key Derivation Function With Insufficient Iteration Count -->
      <Rule Id="CA5388" Action="None" />             <!-- Ensure Sufficient Iteration Count When Using Weak Key Derivation Function -->
      <Rule Id="CA5389" Action="None" />             <!-- Do Not Add Archive Item's Path To The Target File System Path -->
      <Rule Id="CA5390" Action="Warning" />          <!-- Do Not Hard Code Encryption Key -->
      <Rule Id="CA5391" Action="None" />             <!-- Use antiforgery tokens in ASP.NET Core MVC controllers -->
      <Rule Id="CA5392" Action="None" />             <!-- Use DefaultDllImportSearchPaths attribute for P/Invokes -->
      <Rule Id="CA5393" Action="None" />             <!-- Do not use unsafe DllImportSearchPath value -->
      <Rule Id="CA5394" Action="Warning" />          <!-- Do not use insecure randomness -->
      <Rule Id="CA5395" Action="None" />             <!-- Miss HttpVerb attribute for action methods -->
      <Rule Id="CA5396" Action="None" />             <!-- Set HttpOnly to true for HttpCookie -->
      <Rule Id="CA5397" Action="Warning" />          <!-- Do not use deprecated SslProtocols values -->
      <Rule Id="CA5398" Action="None" />             <!-- Avoid hardcoded SslProtocols values -->
      <Rule Id="CA5399" Action="None" />             <!-- Definitely disable HttpClient certificate revocation list check -->
      <Rule Id="CA5400" Action="None" />             <!-- Ensure HttpClient certificate revocation list check is not disabled -->
      <Rule Id="CA9999" Action="Warning" />          <!-- Analyzer version mismatch -->
   </Rules>
</RuleSet>
