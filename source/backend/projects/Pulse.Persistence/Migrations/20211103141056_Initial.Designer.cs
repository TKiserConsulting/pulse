// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pulse.Persistence;

namespace Pulse.Persistence.Migrations
{
    [DbContext(typeof(PulseDbContext))]
    [Migration("20211103141056_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pulse")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_identity_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("identity_role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_identity_role_claim_role_id");

                    b.ToTable("identity_role_claim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_identity_user_claim_user_id");

                    b.ToTable("identity_user_claim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_identity_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_identity_user_login_user_id");

                    b.ToTable("identity_user_login");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_identity_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_identity_user_role_role_id");

                    b.ToTable("identity_user_role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_identity_user_token");

                    b.ToTable("identity_user_token");
                });

            modelBuilder.Entity("Pulse.Data.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_application_user");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("application_user");
                });

            modelBuilder.Entity("Pulse.Data.Auth.IdentityRefreshToken", b =>
                {
                    b.Property<Guid>("IdentityRefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identity_refresh_token_id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_user_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("Expired")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("token");

                    b.HasKey("IdentityRefreshTokenId")
                        .HasName("pk_identity_refresh_token");

                    b.HasIndex("ApplicationUserId")
                        .HasDatabaseName("ix_identity_refresh_token_application_user_id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_identity_refresh_token_token");

                    b.ToTable("identity_refresh_token");
                });

            modelBuilder.Entity("Pulse.Data.Emoticon", b =>
                {
                    b.Property<Guid>("EmoticonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("emoticon_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer")
                        .HasColumnName("sort_index");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("EmoticonId")
                        .HasName("pk_emoticon");

                    b.ToTable("emoticon");
                });

            modelBuilder.Entity("Pulse.Data.EmoticonTap", b =>
                {
                    b.Property<Guid>("EmoticonTapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("emoticon_tap_id");

                    b.Property<Guid>("InstructorEmoticonId")
                        .HasColumnType("uuid")
                        .HasColumnName("instructor_emoticon_id");

                    b.Property<Guid>("SessionStudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_student_id");

                    b.Property<long>("TimeTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("time_ticks");

                    b.HasKey("EmoticonTapId")
                        .HasName("pk_emoticon_tap");

                    b.HasIndex("InstructorEmoticonId")
                        .HasDatabaseName("ix_emoticon_tap_instructor_emoticon_id");

                    b.HasIndex("SessionStudentId")
                        .HasDatabaseName("ix_emoticon_tap_session_student_id");

                    b.ToTable("emoticon_tap");
                });

            modelBuilder.Entity("Pulse.Data.InstructorEmoticon", b =>
                {
                    b.Property<Guid>("InstructorEmoticonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("instructor_emoticon_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uuid")
                        .HasColumnName("instructor_id");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer")
                        .HasColumnName("sort_index");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("InstructorEmoticonId")
                        .HasName("pk_instructor_emoticon");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("ix_instructor_emoticon_instructor_id");

                    b.ToTable("instructor_emoticon");
                });

            modelBuilder.Entity("Pulse.Data.InstructorProfile", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uuid")
                        .HasColumnName("instructor_id");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by");

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("school");

                    b.Property<byte[]>("SmallImage")
                        .HasColumnType("bytea")
                        .HasColumnName("small_image");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("Subject")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subject");

                    b.HasKey("InstructorId")
                        .HasName("pk_instructor_profile");

                    b.ToTable("instructor_profile");
                });

            modelBuilder.Entity("Pulse.Data.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Finished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by");

                    b.HasKey("SessionId")
                        .HasName("pk_session");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_session_class_id");

                    b.ToTable("session");
                });

            modelBuilder.Entity("Pulse.Data.SessionCheckin", b =>
                {
                    b.Property<Guid>("SessionCheckinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("session_checkin_id");

                    b.Property<int>("CheckinType")
                        .HasColumnType("integer")
                        .HasColumnName("checkin_type");

                    b.Property<DateTimeOffset?>("Finished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<DateTimeOffset>("Started")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started");

                    b.HasKey("SessionCheckinId")
                        .HasName("pk_session_checkin");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_session_checkin_session_id");

                    b.ToTable("session_checkin");
                });

            modelBuilder.Entity("Pulse.Data.SessionQuestion", b =>
                {
                    b.Property<Guid>("SessionQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("session_question_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("Dismissed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dismissed");

                    b.Property<Guid>("SessionCheckinId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_checkin_id");

                    b.Property<Guid>("SessionStudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_student_id");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("text");

                    b.HasKey("SessionQuestionId")
                        .HasName("pk_session_question");

                    b.HasIndex("SessionCheckinId")
                        .HasDatabaseName("ix_session_question_session_checkin_id");

                    b.HasIndex("SessionStudentId")
                        .HasDatabaseName("ix_session_question_session_student_id");

                    b.ToTable("session_question");
                });

            modelBuilder.Entity("Pulse.Data.SessionStudent", b =>
                {
                    b.Property<Guid>("SessionStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("session_student_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.HasKey("SessionStudentId")
                        .HasName("pk_session_student");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_session_student_session_id");

                    b.ToTable("session_student");
                });

            modelBuilder.Entity("Pulse.Data.TheClass", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uuid")
                        .HasColumnName("instructor_id");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("ClassId")
                        .HasName("pk_the_class");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("ix_the_class_instructor_id");

                    b.ToTable("the_class");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_identity_role_claim_identity_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Pulse.Data.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_identity_user_claim_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Pulse.Data.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_identity_user_login_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_identity_user_role_identity_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pulse.Data.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_identity_user_role_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Pulse.Data.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_identity_user_token_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pulse.Data.Auth.IdentityRefreshToken", b =>
                {
                    b.HasOne("Pulse.Data.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("fk_identity_refresh_token_application_user_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pulse.Data.EmoticonTap", b =>
                {
                    b.HasOne("Pulse.Data.InstructorEmoticon", "Emoticon")
                        .WithMany()
                        .HasForeignKey("InstructorEmoticonId")
                        .HasConstraintName("fk_emoticon_tap_instructor_emoticon_instructor_emoticon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pulse.Data.SessionStudent", "SessionStudent")
                        .WithMany()
                        .HasForeignKey("SessionStudentId")
                        .HasConstraintName("fk_emoticon_tap_session_student_session_student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emoticon");

                    b.Navigation("SessionStudent");
                });

            modelBuilder.Entity("Pulse.Data.InstructorEmoticon", b =>
                {
                    b.HasOne("Pulse.Data.Auth.ApplicationUser", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("fk_instructor_emoticon_application_user_instructor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Pulse.Data.InstructorProfile", b =>
                {
                    b.HasOne("Pulse.Data.Auth.ApplicationUser", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("fk_instructor_profile_application_user_instructor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Pulse.Data.Session", b =>
                {
                    b.HasOne("Pulse.Data.TheClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .HasConstraintName("fk_session_the_class_class_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Pulse.Data.SessionCheckin", b =>
                {
                    b.HasOne("Pulse.Data.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_session_checkin_session_session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Pulse.Data.SessionQuestion", b =>
                {
                    b.HasOne("Pulse.Data.SessionCheckin", "SessionCheckin")
                        .WithMany()
                        .HasForeignKey("SessionCheckinId")
                        .HasConstraintName("fk_session_question_session_checkin_session_checkin_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pulse.Data.SessionStudent", "SessionStudent")
                        .WithMany()
                        .HasForeignKey("SessionStudentId")
                        .HasConstraintName("fk_session_question_session_student_session_student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionCheckin");

                    b.Navigation("SessionStudent");
                });

            modelBuilder.Entity("Pulse.Data.SessionStudent", b =>
                {
                    b.HasOne("Pulse.Data.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_session_student_session_session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Pulse.Data.TheClass", b =>
                {
                    b.HasOne("Pulse.Data.Auth.ApplicationUser", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("fk_the_class_application_user_instructor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });
#pragma warning restore 612, 618
        }
    }
}
