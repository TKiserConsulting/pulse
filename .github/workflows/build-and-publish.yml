name: Build and Publish

on:
  # run it manually
  workflow_dispatch:
    branches: [master]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: tkiserconsulting/pulse

defaults:
  # define job to build and publish docker image
  build-and-push-docker-image:
    name: Build Docker image and push to Github Container registry
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare
        id: prep
        run: |
          DOCKER_TAG_IMAGE=${DOCKER_REGISTRY}/${DOCKER_IMAGE}
          APPLICATION_VERSION=`git describe --tags --long --abbrev=6 --match [0-9]*.[0-9]*.[0-9]* 2>/dev/null || echo "0.1.0-0-g${GITHUB_SHA::6}"`
          HUMAN_VERSION=noop
          echo "[info] 1 ${GITHUB_REF}"
          if [ "${{ github.event_name }}" = "schedule" ]; then
            HUMAN_VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then            
            HUMAN_VERSION=${GITHUB_REF#refs/tags/}
            echo "[info] 2 ${HUMAN_VERSION}"
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            HUMAN_VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            echo "[info] 3 ${HUMAN_VERSION}"
            if [ "${{ github.event.repository.default_branch }}" = "$HUMAN_VERSION" ]; then
              HUMAN_VERSION=edge
              echo "[info] 4 ${HUMAN_VERSION}"
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            HUMAN_VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${HUMAN_VERSION}"
          DOCKER_TAGS="${DOCKER_TAG_IMAGE}:${HUMAN_VERSION}"
          if [[ $HUMAN_VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${HUMAN_VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${MINOR},${MAJOR},latest"
            DOCKER_TAGS="$DOCKER_TAGS,${DOCKER_TAG_IMAGE}:${MINOR},${DOCKER_TAG_IMAGE}:${MAJOR},${DOCKER_TAG_IMAGE}:latest"
          #elif [ "${{ github.event_name }}" = "push" ]; then
          #  TAGS="${APPLICATION_VERSION},$TAGS"
          #  DOCKER_TAGS="${DOCKER_TAG_IMAGE}:${APPLICATION_VERSION},$DOCKER_TAGS"
          fi
          echo ::set-output name=docker_registry::${DOCKER_REGISTRY}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=revision::${GITHUB_SHA}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_tags::${DOCKER_TAGS}
          echo ::set-output name=human_version::${HUMAN_VERSION}
          echo ::set-output name=application_version::${APPLICATION_VERSION}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "app version: ${APPLICATION_VERSION}"
          echo "docker version: ${HUMAN_VERSION}"
          echo "docker tags: ${DOCKER_TAGS}"
          echo "tags: ${TAGS}"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Configure docker layers caching
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-v2-buildx-

      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Packages registry
        uses: docker/login-action@v1
        with:
          registry: ${{ steps.prep.outputs.docker_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.prep.outputs.docker_tags }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=local,dest=/tmp/.buildx-cache
          build-args: |
            version=${{ steps.prep.outputs.application_version }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.version=${{ steps.prep.outputs.application_version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          # build on feature branches, push only on main branch
          # push: ${{ github.ref == 'refs/heads/master' }}

      - name: Update status
        #if: ${{ false }}
        uses: geekodour/gh-actions-custom-status@v0.0.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LAST_COMMIT_SHA: ${{ steps.prep.outputs.revision }}
        with:
          args: >-
            --state=success
            --context=Build
            --target_url=https://github.com/${{ github.repository }}/actions
            --description="version: ${{ steps.prep.outputs.application_version }}"
